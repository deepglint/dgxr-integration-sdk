// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThreeDimSkelClient is the client API for ThreeDimSkel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreeDimSkelClient interface {
	ServiceCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendThreeDimSkelData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type threeDimSkelClient struct {
	cc grpc.ClientConnInterface
}

func NewThreeDimSkelClient(cc grpc.ClientConnInterface) ThreeDimSkelClient {
	return &threeDimSkelClient{cc}
}

func (c *threeDimSkelClient) ServiceCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dvsn3dframe.ThreeDimSkel/ServiceCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threeDimSkelClient) SendThreeDimSkelData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dvsn3dframe.ThreeDimSkel/SendThreeDimSkelData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreeDimSkelServer is the server API for ThreeDimSkel service.
// All implementations must embed UnimplementedThreeDimSkelServer
// for forward compatibility
type ThreeDimSkelServer interface {
	ServiceCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SendThreeDimSkelData(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedThreeDimSkelServer()
}

// UnimplementedThreeDimSkelServer must be embedded to have forward compatible implementations.
type UnimplementedThreeDimSkelServer struct {
}

func (UnimplementedThreeDimSkelServer) ServiceCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCheck not implemented")
}
func (UnimplementedThreeDimSkelServer) SendThreeDimSkelData(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendThreeDimSkelData not implemented")
}
func (UnimplementedThreeDimSkelServer) mustEmbedUnimplementedThreeDimSkelServer() {}

// UnsafeThreeDimSkelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreeDimSkelServer will
// result in compilation errors.
type UnsafeThreeDimSkelServer interface {
	mustEmbedUnimplementedThreeDimSkelServer()
}

func RegisterThreeDimSkelServer(s grpc.ServiceRegistrar, srv ThreeDimSkelServer) {
	s.RegisterService(&ThreeDimSkel_ServiceDesc, srv)
}

func _ThreeDimSkel_ServiceCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreeDimSkelServer).ServiceCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dvsn3dframe.ThreeDimSkel/ServiceCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreeDimSkelServer).ServiceCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreeDimSkel_SendThreeDimSkelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreeDimSkelServer).SendThreeDimSkelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dvsn3dframe.ThreeDimSkel/SendThreeDimSkelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreeDimSkelServer).SendThreeDimSkelData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ThreeDimSkel_ServiceDesc is the grpc.ServiceDesc for ThreeDimSkel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreeDimSkel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dvsn3dframe.ThreeDimSkel",
	HandlerType: (*ThreeDimSkelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceCheck",
			Handler:    _ThreeDimSkel_ServiceCheck_Handler,
		},
		{
			MethodName: "SendThreeDimSkelData",
			Handler:    _ThreeDimSkel_SendThreeDimSkelData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metapos.proto",
}
