# CI编译docker镜像流程
# gitlab pipelines
default:
  interruptible: true
  # 指定runner的tag
  tags:
    - alpha-ci

variables:
  GIT_DEPTH: 1
  GIT_STRATEGY: clone

stages:
  - update-version
  - build pre
  - build stardust
  - release
  - deploy

include:
    - local: .gitlab/ci/build-stardust.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_ENVIRONMENT_NAME

update_version:
  stage: update-version
  only:
    - /^v\d+\.\d+\.\d+-upm$/
  script:
    - git remote set-url origin https://oauth2:$CI_ROBOT_TOKEN_WRITE@gitlab.deepglint.com/alpha/stardust.git
    - git remote -v
    - git config --global user.email "ibalpha.monitor@deepglint.com"
    - git config --global user.name "ibalpha-robot"
    - echo delete tag $CI_COMMIT_REF_NAME
    - git tag -d $CI_COMMIT_REF_NAME
    - git push --delete origin $CI_COMMIT_REF_NAME
    - echo update package.json
    - cd Assets
    - NEW_VERSION=$(echo $CI_COMMIT_REF_NAME | sed 's/-upm//')-alpha
    - jq --arg new_version "$NEW_VERSION" --arg doc_url "$COS_REPO/dgxr/dgxr-doc-$NEW_VERSION/html/index.html" \
      '.version = $new_version | .documentationUrl = $doc_url' package.json > tmp.json && mv tmp.json package.json
    - cat package.json
    - TMP_BRANCH=feat/release-$NEW_VERSION
    - git checkout -b $TMP_BRANCH
    - git add package.json
    - git commit -m "Update version to $NEW_VERSION"
    - echo update version to $NEW_VERSION
    - git tag $NEW_VERSION
    - git push origin $TMP_BRANCH
    - git push origin $NEW_VERSION
    - git fetch origin feat/test-release
    - git checkout feat/test-release
    - git merge origin/feat/test-release
    - git push origin $TMP_BRANCH:feat/test-release
    #- git fetch origin $CI_DEFAULT_BRANCH
    #- git push origin $TMP_BRANCH:$CI_DEFAULT_BRANCH
    # - git checkout $CI_DEFAULT_BRANCH
    - git branch -D $TMP_BRANCH
    #- git push origin --delete $TMP_BRANCH

build:prepare:
  stage: .pre
  image: ccr.ccs.tencentyun.com/solution/docker:20.10.15-alpine3.15
  before_script:
    - mkdir -p /results/$CI_PIPELINE_ID
  script:
    - CI_COMMIT_TAG=`echo $CI_COMMIT_TAG | sed 's/^0*//'`
    - echo $CI_COMMIT_TAG > .tags
    - if [ -z $CI_COMMIT_TAG ]; then echo $CI_COMMIT_SHORT_SHA > .tags; fi
    - export IMAGE_TAG=$(cat .tags)
    - echo "IMAGE_TAG=$IMAGE_TAG" > .env
    - echo $IMAGE_TAG
    - IMAGE_TAG=`echo $IMAGE_TAG | sed 's/^v//g'`
    - if [ -z $CI_COMMIT_TAG ]; then echo v0.0.0-$IMAGE_TAG > .tags; fi
    - export TAG=$(cat .tags)

    - export IMAGE_TAG=$(cat .tags)
    - echo $IMAGE_TAG
    - echo "IMAGE_TAG=$IMAGE_TAG" >> .env

    - echo $TAG
    - echo "TAG=$TAG" >> .env
  artifacts:
    reports:
      dotenv: .env

build:cleanup:
  stage: .post
  variables:
    GIT_STRATEGY: none
  image: ccr.ccs.tencentyun.com/solution/docker:20.10.15-alpine3.15
  script:
    - trap 'rm -rf  /results/$CI_PIPELINE_ID' EXIT
    - docker system prune --force --volumes || true
  when: always

release:push:
  stage: release
  image: 
    name: ccr.ccs.tencentyun.com/solution/python-gitlab:v3.15.0
    entrypoint: [""]
  script:
    - pip install --trusted-host package.nemoface.com -i http://package.nemoface.com/repository/pypi/simple gitbot
    - git-release
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-upm$/'